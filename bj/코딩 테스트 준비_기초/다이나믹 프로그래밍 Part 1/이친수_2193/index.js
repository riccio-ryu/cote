//2024
const fs = require("fs");
const filePath = process.platform === "linux" ? "/dev/stdin" : "../ex.txt";
const input = fs.readFileSync(filePath).toString().trim();

const num = Number(input);

const dp = new Array(num + 1);
dp[0] = [0, 0];
dp[1] = [0, 1];

for (let i = 2; i <= num; i++) {
  dp[i] = [];
  dp[i][0] = BigInt(dp[i - 1][0] + dp[i - 1][1]);
  dp[i][1] = BigInt(dp[i - 1][0]);
}

console.log(BigInt(dp[num][0] + dp[num][1]).toString());

/** 
수가 비정상적으로 커질 수 있기에 Number 자료형보다 더 큰 수를 나타낼 수 있는 BigInt를 사용해야 된다는것
*/
// 틀림
const input = parseInt( 
  require("fs").readFileSync("example.txt").toString().trim()
);

// 끝자리가 0인 것과 1 인것으로 나눈다 (두개를 합치면 dp[i] i의 갯수가 된다.)
let dp = Array.from({ length: input + 1 }, () => [0, 0]);

dp[1][0] = 0;
dp[1][1] = 1;

for (let i = 2; i <= input; i++) {
  dp[i][0] = dp[i - 1][0] + dp[i - 1][1];
  dp[i][1] = dp[i - 1][0];
}

console.log(dp[input][0] + dp[input][1]);
// console.log(dp);
/**
for (let i = 0; i < 100; i++) {
  console.log(i.toString(2));
}
 * 1 자리 -> 1
 * 2 자리 -> 10
 * 3 자리 -> 100,101
 * 4 자리 -> 1000,1001,1010
 * 5 자리 -> 10000,10001,10010,10100,10101

0
1
10
11
100
101
110
111
1000
1001
1010
1011
1100
1101
1110
1111
10000
10001
10010
10011
10100
10101
10110
10111
11000
11001
11010
11011
11100
11101
11110
11111
100000
100001
100010
100011
100100
100101
100110
100111
101000
101001
101010
101011
101100
101101
101110
101111
110000
110001
110010
110011
110100
110101
110110
110111
111000
111001
111010
111011
111100
111101
111110
111111
1000000
1000001
1000010
1000011
1000100
1000101
1000110
1000111
1001000
1001001
1001010
1001011
1001100
1001101
1001110
1001111
1010000
1010001
1010010
1010011
1010100
1010101
1010110
1010111
1011000
1011001
1011010
1011011
1011100
1011101
1011110
1011111
1100000
1100001
1100010
1100011
 */
