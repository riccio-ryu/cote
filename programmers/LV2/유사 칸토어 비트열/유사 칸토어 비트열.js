// 2023

//lv2중 가장 어려웠던 문제 한 3~4시간 걸림....

function solution(n, l, r) {
    /*
    n = 0 -> 1                                  1 , 1   , t: 1
    
    n = 1 -> 11011                              1 , 4   , t: 5
    
    n = 2 -> 11011 11011 00000 11011 11011      1 , 4**2    , t:5**2
    
    n = 3 -> 11011 11011 00000 11011 11011 
             11011 11011 00000 11011 11011
             00000 00000 00000 00000 00000
             11011 11011 00000 11011 11011
             11011 11011 00000 11011 11011      1 , 4**3    , t: 5*3
             
    n = 4 -> 11011 11011 00000 11011 11011 
             11011 11011 00000 11011 11011
             00000 00000 00000 00000 00000
             11011 11011 00000 11011 11011
             11011 11011 00000 11011 11011
             
             11011 11011 00000 11011 11011 
             11011 11011 00000 11011 11011
             00000 00000 00000 00000 00000
             11011 11011 00000 11011 11011
             11011 11011 00000 11011 11011
             
             00000 00000 00000 00000 00000 
             00000 00000 00000 00000 00000
             00000 00000 00000 00000 00000
             00000 00000 00000 00000 00000
             00000 00000 00000 00000 00000
             
             11011 11011 00000 11011 11011 
             11011 11011 00000 11011 11011
             00000 00000 00000 00000 00000
             11011 11011 00000 11011 11011
             11011 11011 00000 11011 11011
             
             11011 11011 00000 11011 11011 
             11011 11011 00000 11011 11011
             00000 00000 00000 00000 00000
             11011 11011 00000 11011 11011
             11011 11011 00000 11011 11011      1, 4**4 , t:5**4
    */
    // 4**n - (0 ~ l) - (5**n ~ r) ? 
    // 0~4 :: 2,   17~25 :: 6
    // 00000 :: 3,8,11,12,13,14,15,18,23 , 28,33,36,37,38,39,40,43,48 , 51~75
    // let answer = 0;
    let v = [0,1,2,2,3,4]     // 11011 개수, 0은 없다
    let cnt = 0
    function f (n, a) {
        // console.log('na', n,a)
        if(n === 1) return v[a]
        // 총 1의 개수(4**n) - (l-1 의 1의 개수) - (5**n - r의 1의 개수)
        const [x,y] = [~~(a/(5 ** (n-1))),a%(5 ** (n-1))]   // n으로 하면 나눠지지 않음(0), 즉 더해지기전인 n-1
        // console.log('start ', x,y, 'cnt ', cnt)
        cnt++
        if(x < 2) {// 몫이 10보다 작다면 5 + 0~4 재귀
            // console.log('if ', x, y, ' // ', 4**(n-1) * x + f(n-1, y))
            return 4**(n-1) * x + f(n-1, y)
        }
        else if(x === 2) {// 00000 구간
            // console.log('else if', x, y, ' // ', 2 * 4**(n-1))
            return 2 * 4**(n-1)
        }
        else {
            // console.log('else ', x, y, ' // ', 4**(n-1) * (x-1) + f(n-1, y))
            return 4**(n-1) * (x-1) + f(n-1, y)
        }
    }
    const left = f(n, l-1)
    const right = f(n, r)
    // console.log(left, right)
    return right - left;
}
        // let p = a       // a값 복제
        // let cnt = 0;    //1의 합 저장
        // let z = 0;      //몇제곱?
        // // console.log(p)
        // while(true){  // 5의 제곱으로 돌아간다
        //     console.log('p', p, z, n)
        //     const [x, y] = [~~(p/5), p%5]
        //     console.log('x: ', x,' y : ',y)
        //     // p = x + y  -> (x2 + y2)*5 + y  -> ((x3 + y3)*5 + y2)*5 + y
        //     //               x2*5 + y2*5 + y  -> x3*(5**2) + y3*(5**2) + y2*5 + y
        //     // 108 -> 105 + 3 ->  21*5 +3  ->  (4*5 + 1)*5 +3  ->  4*(5**2) + 5 + 3
        //     cnt += (v[y])*5**z  // 나머지 계산
        //     p = x*5
        //     z++
        //     console.log('z>=n', z>=n, p, z, cnt)
        //     if(z>=n) return
        // }
        // return 
